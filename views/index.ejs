<%- include ('partials/header') %>

<body>

    <%- include ('partials/nav') %>

    <div class="container-fluid bg-dark p-5">



        <div class = "container p-5" id = "interface">
            <div class = "row g-3">
                <div class = "col-12 col-xl-6">
                    <div class = "card p-3 h-100">    
                        <h2>Clients</h2>
                        <div class = "row g-3">
                            <div class = "col col-12 col-sm-6 col-lg-6">
                                <form class = "form-control h-100" id = "get-clients">
                                    <h2>Get all clients:</h2>
                                    <input class = "form-control" type="submit" value="Get">
                                </form>
                            </div>

                            <div class = "col col-12 col-sm-6 col-lg-6">
                                <form class = "form-control h-100" id = "find-client">
                                    <h2>Get by client ID:</h2>
                                    <label for="user-id">client_id:</label><br>
                                    <input class = "form-control" class = "form-control" type="text" id="client-id" name="client-id" required><br>
                                    <input class = "form-control" class = "form-control" type="submit" value="Get">
                                </form>
                            </div>

                            <div class = "col col-12 col-sm-6 col-lg-6">
                                <form class = "form-control h-100" id = "create-client">
                                    <h2>Create new client:</h2>
                                    <label for="client-name">Name:</label><br>
                                    <input class = "form-control" type="text" id="client-name" name="client-name" required><br>
                                    <label for="client-city">City:</label><br>
                                    <input class = "form-control" type="text" id="client-city" name="client-city" required><br>
                                    <input class = "form-control" type="submit" value="Post">
                                </form>
                            </div>

                            <div class = "col col-12 col-sm-6 col-lg-6">
                                <form class = "form-control h-100" id = "update-client">
                                    <h2>Update client:</h2>
                                    <label for="client-id-update">client_id:</label><br>
                                    <input class = "form-control" type="text" id="client-id-update" name="client-id-update" required><br>
                                    <label for="client-name-update">Name:</label><br>
                                    <input class = "form-control" type="text" id="client-name-update" name="client-name-update" required><br>
                                    <label for="client-city-update">City:</label><br>
                                    <input class = "form-control" type="text" id="client-city-update" name="client-city-update" required><br>
                                    <input class = "form-control" type="submit" value="Put">
                                </form>
                            </div>

                            <div class = "col col-12 col-sm-6 col-lg-6">
                                <form class = "form-control h-100" id = "delete-client">
                                    <h2>Delete client:</h2>
                                    <label for="client-id-delete">client_id:</label><br>
                                    <input class = "form-control" type="text" id="client-id-delete" name="client-id-delete" required><br>
                                    <input class = "form-control" type="submit" value="Delete">
                                </form>
                            </div>

                        </div>
                    </div>
                </div>

                <div class = "col-12 col-xl-6">
                    <div class = "card p-3 h-100">    
                        <h2>Parts</h2>
                        <div class = "row g-3">
                            <div class = "col col-12 col-sm-6 col-lg-6">
                                <form class = "form-control h-100" id = "get-parts">
                                    <h2>Get all parts:</h2>
                                    <input class = "form-control" type="submit" value="Submit">
                                </form>
                            </div>
                            
                            <div class = "col col-12 col-sm-6 col-lg-6">
                                <form class = "form-control h-100" id = "find-part">
                                    <h2>Get by part number:</h2>
                                    <label for="part-number">part_number:</label><br>
                                    <input class = "form-control" type="text" id="part-number" name="part-number" required><br>
                                    <input class = "form-control" type="submit" value="Get">
                                </form>
                            </div>
                            
                            <div class = "col col-12 col-sm-6 col-lg-6">
                                <form class = "form-control h-100" id = "create-part">
                                    <h2>Create a new part:</h2>
                                    <label for="part-name-create">Name:</label><br>
                                    <input class = "form-control" type="text" id="part-name-create" name="part-name-create" required><br>
                                    <label for="part-price-create">Price:</label><br>
                                    <input class = "form-control" type="text" id="part-price-create" name="part-price-create" required><br>
                                    <label for="part-description-create">Description:</label>
                                    <input class = "form-control" type="text" id="part-description-create" name="part-description-create" required><br>
                                    <label for="quantity-create">Quantity on Hand:</label>
                                    <input class = "form-control" type="text" id="quantity-create" name="quantity-create" required><br>
                                    <input class = "form-control" type="submit" value="Post">
                                </form>
                            </div>
                            
                            <div class = "col col-12 col-sm-6 col-lg-6">
                                <form class = "form-control h-100" id = "update-part">
                                    <h2>Update a part:</h2>
                                    <label for="part-number-update">part_number:</label><br>
                                    <input class = "form-control" type="text" id="part-number-update" name="part-number-update" required><br>
                                    <label for="part-name-update">Name:</label><br>
                                    <input class = "form-control" type="text" id="part-name-update" name="part-name-update" required><br>
                                    <label for="part-price-update">Price:</label><br>
                                    <input class = "form-control" type="text" id="part-price-update" name="part-price-update" required><br>
                                    <label for="part-description-update">Description:</label>
                                    <input class = "form-control" type="text" id="part-description-update" name="part-description-update" required><br>
                                    <label for="quantity-update">Quantity on Hand:</label>
                                    <input class = "form-control" type="text" id="quantity-update" name="quantity-update" required><br>
                                    <input class = "form-control" type="submit" value="Update">
                                </form>
                            </div>

                            <div class = "col col-12 col-sm-6 col-lg-6">
                                <form class = "form-control h-100" id = "delete-part">
                                    <h2>Delete a part:</h2>
                                    <label for="part-number-delete">part_number:</label><br>
                                    <input class = "form-control" type="text" id="part-number-delete" name="part-number-delete" required><br>
                                    <input class = "form-control" type="submit" value="Delete">
                                </form>
                            </div>

                        </div>
                    </div>
                </div>

                <div class = "col-12 ">
                    <div class = "card p-3 h-100">    
                        <h2>Purchase Orders</h2>
                        <div class = "row g-3">
                            <div class = "col col-12 col-sm-6 col-lg-6">
                                <form class = "form-control h-100" id = "get-pos">
                                    <h2>Get all purchase orders:</h2>
                                    <input class = "form-control" type="submit" value="Get">
                                </form>
                            </div>

                            <div class = "col col-12 col-sm-6 col-lg-6">
                                <form class = "form-control h-100" id = "get-pos-number">
                                    <h2>Get purchase order by purchase order number:</h2>
                                    <label for="po-number-get">po_number:</label><br>
                                    <input class = "form-control" type="text" id="po-number-get" name="po-number" required><br>
                                    <input class = "form-control" type="submit" value="Get">
                                </form>
                            </div>

                            <div class = "col col-12 col-sm-6 col-lg-6">
                              <form class = "form-control h-100" id = "create-pos">
                                  <h2>Create new purchase order:</h2>
                                  <label for="po-customer-create">client_id:</label><br>
                                  <input class = "form-control" type="text" id="po-customer-create" name="po-customer-create" required><br>
                                  <label for="po-date-create">po_date:</label><br>
                                  <input class = "form-control" type="date" id="po-date-create" name="po-date-create" required><br>
                                  <input class = "form-control" type="submit" value="Post">
                              </form>
                            </div>
                            
                            <div class = "col col-12 col-sm-6 col-lg-6">
                              <form class = "form-control h-100" id = "edit-pos">
                                <h2>Edit a purchase order:</h2>
                                <label for="po-number-edit">po_number:</label><br>
                                <input class = "form-control" type="text" id="po-number-edit" name="po-number-edit" required><br>
                                <label for="po-customer-edit">po_customer:</label><br>
                                <input class = "form-control" type="text" id="po-customer-edit" name="po-customer-edit" required><br>
                                <label for="po-date-edit">po_date:</label><br>
                                <input class = "form-control" type="date" id="po-date-edit" name="po-date-edit" required><br>
                                <input class = "form-control" type="submit" value="Update">
                              </form>
                            </div>

                            <div class = "col col-12 col-sm-6 col-lg-6">
                              <form class = "form-control h-100" id = "edit-pos">
                                <h2>Add line to purchase order:</h2>
                                <label for="po-number-add-line">po_number:</label><br>
                                <input class = "form-control" type="text" id="po-number-add-line" name="po-number-add-line" required><br>
                                <label for="part-number-add-line">part_number:</label><br>
                                <input class = "form-control" type="text" id="part-number-add-line" name="part-number-add-line" required><br>
                                <label for="quantity-add-line">quantity:</label><br>
                                <input class = "form-control" type="text" id="quantity-add-line" name="quantity-add-line" required><br>
                                <label for = "price-add-line">price:</label><br>
                                
                                <input class = "form-control" type="submit" value="Update">
                              </form>
                            </div>

                        </div>
                    </div>
                </div>
                
            </div>

        </div>

        <div class="container p-5 text-light " id="documentation">
            <h1>Background</h1>
            <h2>Task:</h2>
            <p>Create a web application that allows users to create, read, update and delete (CRUD) data from a Purchase Order database.</p>
            <p>Clients are able to</p>
            <ul>
            <li>List parts,</li>
            <li>Prepare a purchase order,</li>
            <li>Submit a purchase order for a number of parts</li>
            <li>Query the status of a purchase order</li>
            </ul>
            <p>Functionality:</p>
            <ul>
            <li>List parts for sale
            <ul>
            <li>Returns list of parts, including part number, description, etc.</li>
            <li>Excludes quantity on hand</li>
            </ul>
            </li>
            <li>Find information about a specific part given the part number.</li>
            <li>List information about purchase orders</li>
            <li>Prepare a purchase order
            <ul>
            <li>User enters information about the purchase order, including part number, quantity, etc.</li>
            </ul>
            </li>
            <li>Submit a purchase order by invocation of a method that takes the purchase order number as a parameter.</li>
            </ul>
            <h2>API Endpoints</h2>
            <h3>GET</h3>
            <h4>Parts:</h4>
            <p><strong>GET</strong>
            All parts:
            /parts</p>
            <p>ex:</p>
            <p><a href="http://localhost:3000/parts">http://localhost:3000/parts</a></p>
            <p><a href="https://postgres-express-rest.liamo2.repl.co/parts">https://postgres-express-rest.liamo2.repl.co/parts</a></p>
            <p>Part by part number:
            /parts/number/:number</p>
            <p>ex:</p>
            <p><a href="http://localhost:4000/parts/number/1">http://localhost:4000/parts/number/1</a></p>
            <p><a href="https://postgres-express-rest.liamo2.repl.co/parts/number/1">https://postgres-express-rest.liamo2.repl.co/parts/number/1</a></p>
            <h4>Purchase Orders:</h4>
            <p>All purchase orders:
            /pos</p>
            <p>ex:</p>
            <p><a href="http://localhost:4000/pos">http://localhost:4000/pos</a></p>
            <p><a href="https://postgres-express-rest.liamo2.repl.co/pos">https://postgres-express-rest.liamo2.repl.co/pos</a></p>
            <p>Purchase order by purchase order number number:
            /pos/number/:number</p>
            <p>ex:
            <a href="http://localhost:4000/pos/number/1">http://localhost:4000/pos/number/1</a></p>
            <p><a href="https://postgres-express-rest.liamo2.repl.co/pos/number/1">https://postgres-express-rest.liamo2.repl.co/pos/number/1</a></p>
            <h2>Features</h2>
            <p>Here are some key features and functionalities of the Parts925 REST API:</p>
            <h3>Parts Catalog:</h3>
            <p>The API provides access to the comprehensive parts catalog offered by Parts Central. You can retrieve information about different parts, including their names, descriptions, specifications, prices, availability, and more.</p>
            <h3>Search and Filtering:</h3>
            <p>The API allows you to search for specific parts based on various criteria, such as part numbers, keywords, categories, manufacturers, or any other relevant attributes. This helps you find info about parts quickly and efficiently.</p>
            <h3>Error Handling:</h3>
            <p>The API returns appropriate HTTP status codes and error messages to help you identify and handle any issues that may arise during API interactions.</p>
            <h3>Technical Inventory</h3>
            <ul>
            <li><strong>Node.js</strong>: A JavaScript runtime engine.</li>
            <li><strong>Express</strong>: A web application framework for Node.js.
            <ul>
            <li><strong>EJS</strong>: A templating engine for Node.js.</li>
            </ul>
            </li>
            <li><strong>PostgreSQL</strong>: An open-source relational database management system.
            <ul>
            <li><strong>Supabase</strong>: A service that provides free database hosting for learning and prototyping.</li>
            </ul>
            </li>
            </ul>
            <h3>Node.js:</h3>
            <p>Node.js is an open-source, cross-platform, JavaScript runtime environment that executes JavaScript code outside of a browser. Node.js lets developers use JavaScript to write command line tools and for server-side scripting. Node.js is part of the &quot;JavaScript everywhere&quot; paradigm, unifying web application development around a single programming language, rather than different languages for server-side and client-side scripts. <a href="https://nodejs.org/en/docs/guides/getting-started-guide/">Here is a guide to getting started with Node.js</a>.</p>
            <h3>Express.js</h3>
            <p>Express has been called the de facto standard server framework for Node.js. Express provides a minimal and flexible set of features for creating web applications and APIs. It provides a set of features like routing, middleware, view system, etc. It simplifies the server creation process that can be used to create a web application more easily and quickly. <a href="https://expressjs.com/en/starter/installing.html">Here is a guide to getting started with Express.js</a>.</p>
            <h4>EJS</h4>
            <p>EJS is a templating engine for Node.js. It allows you to embed JavaScript into HTML files. It is a simple templating language that lets you generate HTML markup with plain JavaScript. <a href="https://ejs.co/#docs">Here is a guide to getting started with EJS</a>.</p>
            <p>You can install express globally and use the express command to generate a new application by executing the following command in your terminal:</p>
            <pre><code class="language-bash">npm install -g express-generator
            </code></pre>
            <p>or</p>
            <pre><code class="language-bash">npx express-generator
            </code></pre>
            <p>Then, you can generate a new site in your current directory with the following command, specifying EJS as the view engine:</p>
            <pre><code>express --view=ejs
            </code></pre>
            <p>This will generate a website with a simple file structure that looks like this:</p>
            <pre><code>.
            ├── app.js
            ├── bin
            │   └── www
            ├── package.json
            ├── public
            ├── routes
            └── views
            </code></pre>
            <h3>Working with Supabase</h3>
            <p>For convenience, the remote deployment of this project access a PostgreSQL database hosted on Supabase. If you wish to replicate this, sign in to Supabase and create a new project. Then, retrieve the URL and API key from the project settings page. You will need these to connect to your database. Carefully store the generated password and URL in a secure location. You will need these to connect to your database.</p>
            <h4>Retrieving the postgres server URL from the project settings page:</h4>
            <p>The connection string can be retrieved from the project settings page. Click on the project settings icon in the left sidebar, then click on the &quot;Database&quot; tab. The connection string is displayed at the top of the page. These are the values that you will need to connect to your remote database.</p>
            <h3>Creating a .env file:</h3>
            <p>To store environment variables, create a .env file in the root directory of your project. The .env file should contain the following variables:</p>
            <pre><code>DB_PASS=[your database password]
            DB_URL=[your database url]
            </code></pre>
            <p>If you are working with a local copy of the database, DB_URL will be something like localhost:5432. If you are working with a remote database, DB_URL will be something like [your-project-name].supabase.co.</p>
            <h3>PostgreSQL</h3>
            <p>Install the <code>pg-promise</code> package:</p>
            <pre><code class="language-bash">npm install pg-promise
            </code></pre>
            <p>Include the <code>pg-promise</code> package in the list of required modules in <code>app.js</code>:</p>
            <pre><code class="language-js">var createError = require('http-errors');
            var express = require('express');
            var path = require('path');
            var cookieParser = require('cookie-parser');
            var logger = require('morgan');
            var pgp = require('pg-promise')();
            </code></pre>
            <p>Then, require set the values database password and url from the environment variables in <code>app.js</code> file:</p>
            <pre><code class="language-js">var dbPass = process.env.DB_PASS;
            var dbUrl = process.env.DB_URL;
            </code></pre>
            <p>Then create a new database object named <code>db</code> using the <code>pgp</code> function and the database url:</p>
            <pre><code class="language-js">var db = pgp(`postgres://postgres:${dbPass}@${dbUrl}:5432/postgres`)
            </code></pre>
            <h2>Querying the Database:</h2>
            <p>A simple example of a query is retrieving all of the data from the <code>parts925</code> table. This can be done by specifying the route and the query in <code>routes/parts.js</code>:</p>
            <pre><code class="language-js">var express = require('express');
            var router = express.Router();
            
            var db = require('../database/db');
            
            /* GET all parts */
            router.get('/', function(req, res, next) {
                db.any(`SELECT part_number, part_name, part_description FROM public.parts925`, [true])
                    .then(function(data) {
                        res.json(data);
                    })
                    .catch(function(error) {
                        res.send(error);
                    });
            });
            
            module.exports = router;
            </code></pre>
            <p>This file is referenced in <code>app.js</code>:</p>
            <pre><code class="language-js">var partsRouter = require('./routes/parts');
            
            app.use('/parts', partsRouter);
            </code></pre>
            <p>This loads the data from the <code>parts925</code> table and displays it in JSON format at the <code>/parts</code> route.</p>
            <p>So, if you are to visit the base URL of the project (by default runs on port 4000), you will see the data from the <code>parts925</code> table displayed in JSON format:</p>
            <p><a href="http://localhost:4000/parts">http://localhost:4000/parts</a></p>
            <p><a href="https://postgres-express-rest.liamo2.repl.co/parts">https://postgres-express-rest.liamo2.repl.co/parts</a></p>
            <p>Say for instance you wanted to retrieve the data from the <code>parts925</code> table where the <code>id</code> is equal to 1. You can do this by specifying the route and the query in <code>routes/parts.js</code>:</p>
            <pre><code class="language-js">/* GET parts by part number */
            router.get('/number/:number', function(req, res, next) {
                var partNumber = req.params.number;
            
                db.any(`SELECT part_name, part_number, part_number_cpu, part_description FROM public.parts925 WHERE &quot;part_number&quot; = $1 `, [partNumber])
                    .then(function(data) {
                        res.json(data);
                    })
                    .catch(function(error) {
                        res.status(500);
                        res.send(error);
                    });
            });
            </code></pre>
            <p><code>/number/:number</code> corresponds to the route <code>parts/number/</code> followed by a part number. So, if you are to visit the following URL, you will see the data from the <code>Parts925</code> table where the <code>part_number</code> is equal to the part number specified in the URL:</p>
            <p><a href="http://localhost:4000/parts/number/1">http://localhost:4000/parts/number/1</a></p>
            <p><a href="https://postgres-express-rest.liamo2.repl.co/parts/number/1">https://postgres-express-rest.liamo2.repl.co/parts/number/1</a></p>
            <p>This will provide a JSON response with the data from the <code>Parts925</code> table where the <code>part_number</code> is equal to 1:</p>
            <pre><code class="language-json">[{
                &quot;created_at&quot;: &quot;2023-06-07T00:00:51.664Z&quot;,
                &quot;part_name&quot;: &quot;Ryzen Threadripper 2990WX&quot;,
                &quot;part_number&quot;: &quot;1&quot;,
                &quot;part_number_cpu&quot;: &quot;25765&quot;,
                &quot;part_description&quot;: null,
                &quot;quantity_on_hand&quot;: &quot;10&quot;
            }]
            </code></pre>
            <h3>Deployment:</h3>
            <h4>Github</h4>
            <p>For ease of integration with Repl.it, I have deployed the application on Github. You can view the publi c repository <a href="https://github.com/LiamOsler/postgres-express-REST">here</a></p>
            <h4>Repl.it</h4>
            <p>For ease of access, I have deployed the application on the online IDE/deployment platform Repl.it. You can view the application <a href="https://postgres-express-rest.liamo2.repl.co/">here</a> and you can view the IDE with the code <a href="https://replit.com/@LiamO2/postgres-express-REST">here</a>. Note, if the application is not dormant, it may take a second to start running.</p>
            <h1>References</h1>
            <h2>Blogs, tutorials and videos:</h2>
            <p>Net Ninja Express Tutorials:
            https://www.youtube.com/watch?v=yXEesONd_54</p>
            <h2>Documentation:</h2>
            <p>Node.js:
            https://nodejs.org/en/</p>
            <p>Express:
            https://expressjs.com/en/guide/using-template-engines.html</p>
            
        </div>

    </div>

    <script>
        var createPOS = document.getElementById('create-pos');
        createPOS.addEventListener('submit', function(e) {
          e.preventDefault();
          var poCustomer = document.getElementById('po-customer-create').value;
          var poDate = document.getElementById('po-date-create').value;
        
          var xhr = new XMLHttpRequest();
          xhr.open('POST', '/pos/', true);
          xhr.setRequestHeader('Content-Type', 'application/json');
          xhr.onload = function() {
            if (xhr.status === 200) {
                alert('Purchase Order Created:' + xhr.responseText);
            } else {
                alert('Error: ' + xhr.responseText);
            }
          };
          xhr.send(JSON.stringify({po_customer:poCustomer, po_date:poDate}));
        }) 

        var editPOS = document.getElementById('edit-pos');
        editPOS.addEventListener('submit', function(e) {
          e.preventDefault();
          var poNumber = document.getElementById('po-number-edit').value;
          var poCustomer = document.getElementById('po-customer-edit').value;
          var poDate = document.getElementById('po-date-edit').value;
        
          var xhr = new XMLHttpRequest();
          xhr.open('PUT', '/pos/number/' + poNumber, true);
          xhr.setRequestHeader('Content-Type', 'application/json');
          xhr.onload = function() {
            if (xhr.status === 200) {
                alert('Purchase Order Updated:' + xhr.responseText);
            } else {
                alert('Error: ' + xhr.responseText);
            }
          };
          xhr.send(JSON.stringify({po_number: poNumber, po_customer:poCustomer, po_date:poDate}));
        })


        var getPOs = document.getElementById('get-pos');
        getPOs.addEventListener('submit', function(e) {
          e.preventDefault();
      
          var xhr = new XMLHttpRequest();
          xhr.open('GET', '/pos/', true);
          xhr.setRequestHeader('Content-Type', 'application/json');
          xhr.onload = function() {
            if (xhr.status === 200) {
                alert('Purchase Orders:' + xhr.responseText);
            } else {
                alert('Error: ' + xhr.responseText);
            }
          };
          xhr.send();
        });

        var getPONumber = document.getElementById('get-pos-number');
        getPONumber.addEventListener('submit', function(e) {
          e.preventDefault();
          var poNumber = document.getElementById('po-number-get').value;
      
          var xhr = new XMLHttpRequest();
          xhr.open('GET', '/pos/number/' + poNumber, true);
          xhr.setRequestHeader('Content-Type', 'application/json');
          xhr.onload = function() {
            if (xhr.status === 200) {
                alert('Purchase Orders:' + xhr.responseText);
            } else {
                alert('Error: ' + xhr.responseText);
            }
          };
          xhr.send();
        });


        var deletePart = document.getElementById('delete-part');
        deletePart.addEventListener('submit', function(e) {
          e.preventDefault();
          var partNumber = document.getElementById('part-number-delete').value;
      
          var xhr = new XMLHttpRequest();
          xhr.open('DELETE', '/parts/number/' + partNumber, true);
          xhr.setRequestHeader('Content-Type', 'application/json');
          xhr.onload = function() {
            if (xhr.status === 200) {
                alert('Part Deleted:' + xhr.responseText);
            } else {
                alert('Error: ' + xhr.responseText);
            }
          };
          xhr.send();
        });


        var getParts = document.getElementById('get-parts');
        getParts.addEventListener('submit', function(e) {
          e.preventDefault();
      
          var xhr = new XMLHttpRequest();
          xhr.open('GET', '/parts/', true);
          xhr.setRequestHeader('Content-Type', 'application/json');
          xhr.onload = function() {
            if (xhr.status === 200) {
                alert('Parts Found:' + xhr.responseText);
            } else {
                alert('Error: ' + xhr.responseText);
            }
          };
          xhr.send();
        });

        var findPart = document.getElementById('find-part');
        findPart.addEventListener('submit', function(e) {
          e.preventDefault();
          var partNumber = document.getElementById('part-number').value;

          var xhr = new XMLHttpRequest();
          xhr.open('GET', '/parts/number/' + partNumber, true);
          xhr.setRequestHeader('Content-Type', 'application/json');
          xhr.onload = function() {
            if (xhr.status === 200) {
                alert('Parts Found:' + xhr.responseText);
            } else {
                alert('Error: ' + xhr.responseText);
            }
          };
          xhr.send();
        });

        var createPart = document.getElementById('create-part');
        createPart.addEventListener('submit', function(e) {
            e.preventDefault();

            var partName = document.getElementById('part-name-create').value;
            var partPrice = document.getElementById('part-price-create').value;
            var partDescription = document.getElementById('part-description-create').value;
            var quantity = document.getElementById('quantity-create').value;

            var xhr = new XMLHttpRequest();
            xhr.open('POST', '/parts/', true);
            xhr.setRequestHeader('Content-Type', 'application/json');
            xhr.onload = function() {
            if (xhr.status === 200) {
                alert('Part Created:' + xhr.responseText);
            } else {
                alert('Error: ' + xhr.responseText);
            }
            };
            xhr.send(JSON.stringify({
                "part_name": partName,
                "part_price": partPrice,
                "part_description": partDescription,
                "quantity": quantity
            }));
        });

        var updatePart = document.getElementById('update-part');

        updatePart.addEventListener('submit', function(e) {
            e.preventDefault();

            var partNumber = document.getElementById('part-number-update').value;
            var partName = document.getElementById('part-name-update').value;
            var partPrice = document.getElementById('part-price-update').value;
            var partDescription = document.getElementById('part-description-update').value;
            var quantity = document.getElementById('quantity-update').value;

            var xhr = new XMLHttpRequest();

            xhr.open('PUT', '/parts/number/' + partNumber, true);
            xhr.setRequestHeader('Content-Type', 'application/json');
            xhr.onload = function() {
                if (xhr.status === 200) {
                alert('Part Updated:' + xhr.responseText);
                } else {
                    alert('Error: ' + xhr.responseText);
                }
            };
            xhr.send(JSON.stringify({
                "part_name": partName,
                "part_price": partPrice,
                "part_description": partDescription,
                "quantity": quantity
            }));
        });



        
        var getClients = document.getElementById('get-clients');
        getClients.addEventListener('submit', function(e) {
          e.preventDefault();
      
          var xhr = new XMLHttpRequest();
          xhr.open('GET', '/clients/', true);
          xhr.setRequestHeader('Content-Type', 'application/json');
          xhr.onload = function() {
            if (xhr.status === 200) {
                alert('Clients Found:' + xhr.responseText);
            } else {
                alert('Error: ' + xhr.responseText);
            }
          };
          xhr.send();
        });


        var findClient = document.getElementById('find-client');
        findClient.addEventListener('submit', function(e) {
          e.preventDefault();
          var clientID = document.getElementById('client-id').value;
      
          var xhr = new XMLHttpRequest();
          xhr.open('GET', '/clients/id/' + clientID, true);
          xhr.setRequestHeader('Content-Type', 'application/json');
          xhr.onload = function() {
            if (xhr.status === 200) {
                alert('Client Found:' + xhr.responseText);
            } else {
                alert('Error: ' + xhr.responseText);
            }
          };
          xhr.send();
        });
      

        var createClient = document.getElementById('create-client');
        createClient.addEventListener('submit', function(e) {
          e.preventDefault();
          var clientName = document.getElementById('client-name').value;
          var clientCity = document.getElementById('client-city').value;

          var xhr = new XMLHttpRequest();
          xhr.open('POST', '/clients/', true);
          xhr.setRequestHeader('Content-Type', 'application/json');
          xhr.onload = function() {
            if (xhr.status === 200) {
              alert('Client Created:' + xhr.responseText);
            } else {
                alert('Error: ' + xhr.responseText);
            }
          };
            xhr.send(JSON.stringify({client_name: clientName, client_city: clientCity}));
        });

        var updateClient = document.getElementById('update-client');
        updateClient.addEventListener('submit', function(e) {
          e.preventDefault();
          var clientID = document.getElementById('client-id-update').value;
          var clientName = document.getElementById('client-name-update').value;
          var clientCity = document.getElementById('client-city-update').value;

      
          var xhr = new XMLHttpRequest();
          xhr.open('PUT', '/clients/id/' + clientID, true);
          xhr.setRequestHeader('Content-Type', 'application/json');
          xhr.onload = function() {
            if (xhr.status === 200) {
                alert('Client Updated:' + xhr.responseText);
            } else {
                alert('Error: ' + xhr.responseText);
                }
            };
            xhr.send(JSON.stringify({client_name: clientName, client_city: clientCity}));
        });

        var deleteClient = document.getElementById('delete-client');
        deleteClient.addEventListener('submit', function(e) {
          e.preventDefault();
          var clientID = document.getElementById('client-id-delete').value;
      
          var xhr = new XMLHttpRequest();
          xhr.open('DELETE', '/clients/id/' + clientID, true);
          xhr.setRequestHeader('Content-Type', 'application/json');
          xhr.onload = function() {
            if (xhr.status === 200) {
                alert('Client Deleted:' + xhr.responseText);
            } else {
                alert('Error: ' + xhr.responseText);
            }
          };
          xhr.send();
        });
        
      </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous">
    </script>
</body>

</html>